<?php
/**
 * Zend Framework
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://framework.zend.com/license/new-bsd
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@zend.com so we can send you a copy immediately.
 *
 * @category   Zend
 * @package    UnitTests
 * @copyright  Copyright (c) 2005-2015 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 * @version    $Id$
 */

/**
 * This file defines configuration for running the unit tests for the Zend
 * Framework.  Some tests have dependencies to PHP extensions or databases
 * which may not necessary installed on the target system.  For these cases,
 * the ability to disable or configure testing is provided below.  Tests for
 * components which should run universally are always run by the master
 * suite and cannot be disabled.
 *
 * Do not edit this file. Instead, copy this file to TestConfiguration.php,
 * and edit the new file. Never commit plaintext passwords to the source
 * code repository.
 */

/**
 * GENERAL SETTINGS
 *
 * OB_ENABLED should be enabled for some tests to check if all functionality
 * works as expected. Such tests include those for Zend_Soap and Zend_Session,
 * which require that headers not be sent in order to work.
 */
defined('TESTS_ZEND_OB_ENABLED') || define('TESTS_ZEND_OB_ENABLED', false);

/**
 * Zend_Cloud online tests
 *
 * You may need to provide connection details for specific adapters under their
 * specific configuration settings elsewhere in this file.
 */
defined('TESTS_ZEND_CLOUD_STORAGE_WINDOWSAZURE_CONTAINER') || define('TESTS_ZEND_CLOUD_STORAGE_WINDOWSAZURE_CONTAINER', 'simplecloudcontainer');


/**
 * Zend_Controller
 *
 * TESTS_ZEND_CONTROLLER_DISPATCHER_OB => test disabling output buffering in
 *                                        dispatcher
 */
defined('TESTS_ZEND_CONTROLLER_DISPATCHER_OB') || define('TESTS_ZEND_CONTROLLER_DISPATCHER_OB', false);

/**
 * Zend_Feed_Rss/Zend_Feed_Atom online tests
 *
 * Set the BASEURI to a vhost pointed at the tests/Zend/Feed/_files
 * subdirectory to enable these tests.
 */
defined('TESTS_ZEND_FEED_IMPORT_ONLINE_BASEURI') || define('TESTS_ZEND_FEED_IMPORT_ONLINE_BASEURI', false);

/**
 * Zend_Feed_Reader tests
 *
 * If the ONLINE_ENABLED property is false, only tests that can be executed
 * without network connectivity are run; when enabled, all tests will run.
 */
defined('TESTS_ZEND_FEED_READER_ONLINE_ENABLED') || define('TESTS_ZEND_FEED_READER_ONLINE_ENABLED', false);

/**
 * Zend_Gdata tests
 *
 * If the ONLINE_ENABLED property is false, only tests that can be executed with
 * a mock HTTP client are run.  No request is sent to the Google Gdata servers.
 * If ONLINE_ENABLED is true, some tests may make requests to the remote
 * servers.  This does not work if you are running tests on a disconnected
 * client host.  Also, the tests may show as failures if the Google servers
 * cannot be reached or if they do not respond for another reason.
 *
 * If the CLIENTLOGIN_ENABLED property below is false, the authenticated
 * tests are reported Skipped in the test run.  Set this property to true
 * to enable tests that require ClientLogin authentication.  Enter your
 * Google login credentials in the EMAIL and PASSWORD properties below.
 *
 * Edit TestConfiguration.php, not TestConfiguration.php.dist.
 * Never commit plaintext passwords to the source code repository.
 *
 * Note: the GData tests currently require that the TZID env variable
 * be set or the timezone otherwise configured.  You'll see errors from the
 * tests if this is not the case.
 */
defined('TESTS_ZEND_GDATA_ONLINE_ENABLED') || define('TESTS_ZEND_GDATA_ONLINE_ENABLED', false);
defined('TESTS_ZEND_GDATA_CLIENTLOGIN_ENABLED') || define('TESTS_ZEND_GDATA_CLIENTLOGIN_ENABLED', false);

/*
 * The credentials provided here should be only for a TEST account.
 * Data for various services in this account may be added to, updated,
 * or deleted based upon the actions of these test accounts.
 */
defined('TESTS_ZEND_GDATA_CLIENTLOGIN_EMAIL') || define('TESTS_ZEND_GDATA_CLIENTLOGIN_EMAIL', 'example@example.com');
defined('TESTS_ZEND_GDATA_CLIENTLOGIN_PASSWORD') || define('TESTS_ZEND_GDATA_CLIENTLOGIN_PASSWORD', 'password');

/*
 * This is the ID of a blank blog.  There is no need to have
 * any content in this blog.  Also, blogs can only be used
 * several times for the purpose of these test cases before
 * they must be deleted and recreated.  Otherwise, the tests
 * will start failing, as posts to Blogger will return a 201 Created
 * response even though the entry was not posted to the blog.
 * This problem is being investigated.
 */
defined('TESTS_ZEND_GDATA_BLOGGER_ONLINE_ENABLED') || define('TESTS_ZEND_GDATA_BLOGGER_ONLINE_ENABLED', false);
defined('TESTS_ZEND_GDATA_BLOG_ID') || define('TESTS_ZEND_GDATA_BLOG_ID', '1111111111111111111');

/*
 * This is the key for a spreadsheet with data only in the first row of
 * the spreadsheet.  The strings 'a1', 'b1', 'c1', 'd1' should be in the
 * corresponding cell locations.
 */
defined('TESTS_ZEND_GDATA_SPREADSHEETS_ONLINE_ENABLED') || define('TESTS_ZEND_GDATA_SPREADSHEETS_ONLINE_ENABLED', false);
defined('TESTS_ZEND_GDATA_SPREADSHEETS_SPREADSHEETKEY') || define('TESTS_ZEND_GDATA_SPREADSHEETS_SPREADSHEETKEY', 'o01111111111111111111.1111111111111111111');
defined('TESTS_ZEND_GDATA_SPREADSHEETS_WORKSHEETID') || define('TESTS_ZEND_GDATA_SPREADSHEETS_WORKSHEETID', 'default');

/*
 * This indicates that online tests for the Google Calendar API should
 * be performed. The default calendar will be used.
 */
defined('TESTS_ZEND_GDATA_CALENDAR_ONLINE_ENABLED') || define('TESTS_ZEND_GDATA_CALENDAR_ONLINE_ENABLED', false);

/*
 * This is the fully-qualified domain name for a domiain hosted using
 * Google Apps. This domain must be registered with Google Apps and
 * have API access enabled.  This should be a TEST domain only.
 */
defined('TESTS_ZEND_GDATA_GAPPS_ONLINE_ENABLED') || define('TESTS_ZEND_GDATA_GAPPS_ONLINE_ENABLED', false);
defined('TESTS_ZEND_GDATA_GAPPS_DOMAIN') || define('TESTS_ZEND_GDATA_GAPPS_DOMAIN', 'example.com.invalid');
defined('TESTS_ZEND_GDATA_GAPPS_EMAIL') || define('TESTS_ZEND_GDATA_GAPPS_EMAIL', 'example@example.com');
defined('TESTS_ZEND_GDATA_GAPPS_PASSWORD') || define('TESTS_ZEND_GDATA_GAPPS_PASSWORD', 'password');

/*
 * This indicates that online tests for the Books Search data API
 * should be performed.
 */
defined('TESTS_ZEND_GDATA_BOOKS_ONLINE_ENABLED') || define('TESTS_ZEND_GDATA_BOOKS_ONLINE_ENABLED', false);

/*
 * This indicates that online tests for the Google Documents API should
 * be performed.
 */
defined('TESTS_ZEND_GDATA_DOCS_ONLINE_ENABLED') || define('TESTS_ZEND_GDATA_DOCS_ONLINE_ENABLED', false);

/*
 * This indicates that online tests for the GData Photos API should
 * be performed.
 */
defined('TESTS_ZEND_GDATA_PHOTOS_ONLINE_ENABLED') || define('TESTS_ZEND_GDATA_PHOTOS_ONLINE_ENABLED', false);

/**
 * Zend_Loader_Autoloader multi-version support tests
 *
 * ENABLED:      whether or not to run the multi-version tests
 * PATH:         path to a directory containing multiple ZF version installs
 * LATEST:       most recent ZF version in the PATH
 *               e.g., "1.9.2"
 * LATEST_MAJOR: most recent ZF major version in the PATH to test against
 *               e.g., "1.9.2"
 * LATEST_MINOR: most recent ZF minor version in the PATH to test against
 *               e.g., "1.8.4PL1"
 * SPECIFIC:     specific ZF version in the PATH to test against
 *               e.g., "1.7.6"
 * As an example, consider the following tree:
 *     ZendFramework/
 *     |-- 1.9.2
 *     |-- ZendFramework-1.9.1-minimal
 *     |-- 1.8.4PL1
 *     |-- 1.8.4
 *     |-- ZendFramework-1.8.3
 *     |-- 1.7.8
 *     |-- 1.7.7
 *     |-- 1.7.6
 * You would then set the value of "LATEST" and "LATEST_MAJOR" to "1.9.2", and
 * could choose between "1.9.2", "1.8.4PL1", and "1.7.8" for "LATEST_MINOR",
 * and any version number for "SPECIFIC". "PATH" would point to the parent
 * "ZendFramework" directory.
 */
defined('TESTS_ZEND_LOADER_AUTOLOADER_MULTIVERSION_ENABLED') || define('TESTS_ZEND_LOADER_AUTOLOADER_MULTIVERSION_ENABLED', false);
defined('TESTS_ZEND_LOADER_AUTOLOADER_MULTIVERSION_PATH') || define('TESTS_ZEND_LOADER_AUTOLOADER_MULTIVERSION_PATH', false);
defined('TESTS_ZEND_LOADER_AUTOLOADER_MULTIVERSION_LATEST') || define('TESTS_ZEND_LOADER_AUTOLOADER_MULTIVERSION_LATEST', false);
defined('TESTS_ZEND_LOADER_AUTOLOADER_MULTIVERSION_LATEST_MAJOR') || define('TESTS_ZEND_LOADER_AUTOLOADER_MULTIVERSION_LATEST_MAJOR', false);
defined('TESTS_ZEND_LOADER_AUTOLOADER_MULTIVERSION_LATEST_MINOR') || define('TESTS_ZEND_LOADER_AUTOLOADER_MULTIVERSION_LATEST_MINOR', false);
defined('TESTS_ZEND_LOADER_AUTOLOADER_MULTIVERSION_SPECIFIC') || define('TESTS_ZEND_LOADER_AUTOLOADER_MULTIVERSION_SPECIFIC', false);

/**
 * Zend_Locale tests
 *
 * If the TESTS_ZEND_LOCALE_FORMAT_SETLOCALE property below is a valid,
 * locally recognized locale (try "locale -a"), then all tests in
 * tests/Zend/Locale/ test suites will execute *after*
 *    setlocale(LC_ALL, TESTS_ZEND_LOCALE_FORMAT_SETLOCALE);
 * Primarily, this switches certain PHP functions to emit "localized" output,
 * including the built-in "to string" for integer and float conversions.
 * Thus, a locale of 'fr_FR' yields number-to-string conversions in a
 * localized form with the decimal place separator chosen via:
 *    setlocale(LC_ALL, 'fr_FR@euro');
 */
//defined('TESTS_ZEND_LOCALE_FORMAT_SETLOCALE') || define('TESTS_ZEND_LOCALE_FORMAT_SETLOCALE', 'fr');
//defined('TESTS_ZEND_LOCALE_FORMAT_SETLOCALE') || define('TESTS_ZEND_LOCALE_FORMAT_SETLOCALE', 'fr_FR@euro');
defined('TESTS_ZEND_LOCALE_FORMAT_SETLOCALE') || define('TESTS_ZEND_LOCALE_FORMAT_SETLOCALE', false);

/**
 * Zend_Date tests
 *
 * If the BCMATH_ENABLED property below is false, all arithmetic
 * operations will use ordinary PHP math operators and functions.
 * Otherwise, the bcmath functions will be used for unlimited precision.
 *
 * If the EXTENDED_COVERAGE property below is false, most of the I18N
 * unit tests will not be computed... this speeds tests up to 80 minutes
 * when doing reports. *
 * Edit TestConfiguration.php, not TestConfiguration.php.dist.
 */
defined('TESTS_ZEND_LOCALE_BCMATH_ENABLED') || define('TESTS_ZEND_LOCALE_BCMATH_ENABLED', true);
defined('TESTS_ZEND_I18N_EXTENDED_COVERAGE') || define('TESTS_ZEND_I18N_EXTENDED_COVERAGE', true);

/**
 * Zend_Rest tests
 */
defined('TESTS_ZEND_REST_ONLINE_ENABLED') || define('TESTS_ZEND_REST_ONLINE_ENABLED', false);


/**
 * Zend_Serializer adapter tests
 *
 * TESTS_ZEND_SERIALIZER_ADAPTER_WDDX_ENABLED:
 *   - enable wddx adapter tests
 *   - needs wddx and SimpleXml php extension installed
 *
 * TESTS_ZEND_SERIALIZER_ADAPTER_IGBINARY_ENABLED:
 *   - enable igbinary adapter tests
 *   - needs igbinary php extension installed
 */
defined('TESTS_ZEND_SERIALIZER_ADAPTER_WDDX_ENABLED') || define('TESTS_ZEND_SERIALIZER_ADAPTER_WDDX_ENABLED', false);
defined('TESTS_ZEND_SERIALIZER_ADAPTER_IGBINARY_ENABLED') || define('TESTS_ZEND_SERIALIZER_ADAPTER_IGBINARY_ENABLED', false);


/**
 * Zend_Uri tests
 *
 * Setting CRASH_TEST_ENABLED to true will enable some tests that may
 * potentially crash PHP on some systems, due to very deep-nesting regular
 * expressions.
 *
 * Only do this if you know what you are doing!
 */
defined('TESTS_ZEND_URI_CRASH_TEST_ENABLED') || define('TESTS_ZEND_URI_CRASH_TEST_ENABLED', false);

/**
 * Zend_Version tests
 *
 * Set ONLINE_ENABLED if you wish to run validators that require network
 * connectivity.
 */
defined('TESTS_ZEND_VERSION_ONLINE_ENABLED') || define('TESTS_ZEND_VERSION_ONLINE_ENABLED', false);


/**
 * Zend_Validate tests
 *
 * Set ONLINE_ENABLED if you wish to run validators that require network
 * connectivity.
 */
defined('TESTS_ZEND_VALIDATE_ONLINE_ENABLED') || define('TESTS_ZEND_VALIDATE_ONLINE_ENABLED', false);
